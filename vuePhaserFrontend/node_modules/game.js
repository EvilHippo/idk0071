
var game = new Phaser.Game(800, 600, Phaser.AUTO, 'farshock', { preload: preload, create: create, update: update });

function preload() {

    game.load.image('ground1', 'Layer_0000_9.png');
    game.load.image('ground2', 'Layer_0001_8.png');
    game.load.image('bg1', 'Layer_0002_7.png');
    game.load.image('bg2', 'Layer_0003_6.png');
    game.load.image('bg3', 'Layer_0004_Lights.png');
    game.load.image('bg4', 'Layer_0005_5.png');
    game.load.image('bg5', 'Layer_0006_4.png');
    game.load.image('bg6', 'Layer_0007_Lights.png');
    game.load.image('bg7', 'Layer_0008_3.png');
    game.load.image('bg8', 'Layer_0009_2.png');
    game.load.image('bg9', 'Layer_0010_1.png');
    game.load.spritesheet('button', 'startbtn.png', 200, 100);

    //game.load.image('blob', 'Idle(4).png');

    game.load.image('sky', 'assets/sky.png');
    game.load.image('ground', 'assets/platform.png');
    game.load.image('star', 'assets/star.png');
    game.load.spritesheet('dude', 'assets/dude.png', 32, 48);

}

var playing = false;
var bg;
var startbutton;
var platforms;
var player;
var cursors;
var timeLeft = 10;
var timeLeftText = 60;
var score = 0
var scoreText;

function create() {
    

    //  We're going to be using physics, so enable the Arcade Physics system
    game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game
    bg = game.add.sprite(0, -200, 'bg9');
    bg = game.add.sprite(0, -200, 'bg8');
    bg = game.add.sprite(0, -200, 'bg7');
    bg = game.add.sprite(0, -200, 'bg6');
    bg = game.add.sprite(0, -200, 'bg5');
    bg = game.add.sprite(0, -200, 'bg4');
    bg = game.add.sprite(0, -200, 'bg3');
    bg = game.add.sprite(0, -200, 'bg2');
    bg = game.add.sprite(0, -200, 'bg1');
    
   // bg.fixedToCamera = true;
    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();

    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;

    // Here we create the ground.
    var ground = platforms.create(0, game.world.height - 64, 'ground');
    platforms.create(0, -200, 'ground2');
    platforms.create(0, -200, 'ground1');
   
    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    ground.scale.setTo(2, 2);

    //  This stops it from falling away when you jump on it
    ground.body.immovable = true;

    //  Now let's create two ledges
    var ledge = platforms.create(400, 400, 'ground');

    ledge.body.immovable = true;

    ledge = platforms.create(-150, 250, 'ground');

    ledge.body.immovable = true;
    
    // The player and its settings
    player = game.add.sprite(32, game.world.height - 150, 'dude');

    //  We need to enable physics on the player
    game.physics.arcade.enable(player);

    //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y = 0.2;
    player.body.gravity.y = 1500;
   
    //player.body.collideWorldBounds = false;
    

    //  Our two animations, walking left and right.
    player.animations.add('left', [0, 1, 2, 3], 10, true);
    player.animations.add('right', [5, 6, 7, 8], 10, true);
    
    game.camera.follow(player);
    player.body.enable = false;
    startbutton = game.add.button(game.world.width*0.5, game.world.height*0.5, 'button', startGame, this, 1,0,1);
   // startbutton.scale.set(1, );
    startbutton.anchor.set(0.5);
    
    timeLeftText = game.add.text(game.world.centerX +230, game.world.centerY-270, 'Time left: 10', { font: "40px Arial", fill: "#BB0000", align: "center" });
    timeLeftText.anchor.setTo(0.5, 0.5);
    scoreText = game.add.text(game.world.centerX -230, game.world.centerY-270, 'Score: 0', { font: "40px Arial", fill: "#BB0000", align: "center" });
    scoreText.anchor.setTo(0.5, 0.5);
    
    
}

function update() {
    cursors = game.input.keyboard.createCursorKeys();
    //  Collide the player and the stars with the platforms
    var hitPlatform = game.physics.arcade.collide(player, platforms);
    
        //  Reset the players velocity (movement)
    player.body.velocity.x = 0;

    if (cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x = -300;

        player.animations.play('left');
        
       
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        player.body.velocity.x = 300;

        player.animations.play('right');
        
        
    }
    else
    {
        //  Stand still
        player.animations.stop();

        player.frame = 30;
    }

    //  Allow the player to jump if they are touching the ground.
    if (cursors.up.isDown && player.body.touching.down && hitPlatform)
    {
        player.body.velocity.y = -700;
    }

}
function startGame()
{
    console.log('clicked');
    startbutton.visible = false;
    player.body.enable = true;
    game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);
}

function updateCounter() {
    if (timeLeft > 0)
        {
                timeLeft--;
            score += 100;
    timeLeftText.setText('Time left: ' + timeLeft);
            scoreText.setText('Score: ' + score);
        }
    if (timeLeft == 0)
        {
            timeLeftText.setText('GAME OVER!');
            player.body.enable = false;
        }

}

