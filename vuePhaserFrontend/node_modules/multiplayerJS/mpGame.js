canvas_width = window.innerWidth * window.devicePixelRatio;
canvas_height = window.innerHeight * window.devicePixelRatio;

game = new Phaser.Game(800, 600, Phaser.AUTO, 'gameDiv');

let players = {};
let enemyID;
let enemyName;
let map;
let playerName;
let playerId;
let gameStarted = false;

let platforms;
let enemyHitPlatform;
let playerHitPlatform;

let gameProperties = {
    gameWidth: 800,
    gameHeight: 600,
    game_elemnt: "gameDiv"
};


let mpGame = function (game) {
};

/**
 * TODO implement in multiplayer
 * Shoots a bullet to the left or the right of the player, as he was last facing
 */
function fire() {
    let bulletSpeed = 500;
    let bulletSpacing = 400;
    let bullet = bullets.getFirstExists(false);
    if (game.time.now > nextFire) {
        if (bullet) {
            let bulletOffset = Math.sin(game.math.degToRad(player.angle));
            bullet.reset(player.x - 7, player.y + 40);
            bullet.angle = player.angle;
            if (playerLeft == false) {
                game.physics.arcade.velocityFromAngle(bullet.angle, bulletSpeed, bullet.body.velocity);
            }
            if (playerLeft == true) {
                game.physics.arcade.velocityFromAngle(bullet.angle - 180, bulletSpeed, bullet.body.velocity);
            }
            //bullet.body.velocity.x += player.body.velocity.x;

            nextFire = game.time.now + bulletSpacing;
        }
    }
}

/**
 * Moves the player object as indicated by the ID. ID is unique and created at game start.
 * @param serverJson Json sent by the server.
 */
function movePlayers(serverJson) {

    game.physics.arcade.overlap(players[serverJson.id], null, this);

    players[serverJson.id].body.velocity.x = 0;
    if (serverJson.move === "left") {
        players[serverJson.id].body.velocity.x = -150;
        players[serverJson.id].animations.play('left');
    }
    else if (serverJson.move === "right") {
        players[serverJson.id].body.velocity.x = 150;
        console.log("moving right");
        players[serverJson.id].animations.play('right');
    }
    else {
        players[serverJson.id].animations.stop();
        players[serverJson.id].frame = 4;
    }

    if (serverJson.jump === "true" && players[serverJson.id].body.onFloor()) {
        players[serverJson.id].body.velocity.y = -300;
    }

}

/*
function mpSetup(username) {
    console.log("userName: " + username);
    connect();
}
*/

mpGame.prototype = {
    init: function (newEnemyName, newEnemyId, newMap) {
        enemyID = newEnemyId;
        enemyName = newEnemyName;
        map = newMap;
    },

    preload: function () {

        /*
        // currently not in use because all is read from json
        game.load.image('ground1', '../farshockAssets/Layer_0000_9.png');
        game.load.image('ground2', '../farshockAssets/Layer_0001_8.png');
        game.load.image('bg1', '../farshockAssets/Layer_0002_7.png');
        game.load.image('bg2', '../farshockAssets/Layer_0003_6.png');
        game.load.image('bg3', ',,/farshockAssets/Layer_0004_Lights.png');
        game.load.image('bg4', ',,/farshockAssets/Layer_0005_5.png');
        game.load.image('bg5', ',,/farshockAssets/Layer_0006_4.png');
        game.load.image('bg6', ',,/farshockAssets/Layer_0007_Lights.png');
        game.load.image('bg7', ',,/farshockAssets/Layer_0008_3.png');
        game.load.image('bg8', ',,/farshockAssets/Layer_0009_2.png');
        game.load.image('bg9', ',,/farshockAssets/Layer_0010_1.png');
        */

        game.load.spritesheet('button', 'startbtn.png', 200, 100);

        game.load.image('sky', '../assets/sky.png');
        game.load.image('ground', '../assets/platform.png');
        game.load.spritesheet('dude', '../assets/dude.png', 32, 48);
        game.load.image('bullet', '../farshockAssets/purple_ball.png');

        game.load.tilemap('map', null, map, Phaser.Tilemap.TILED_JSON);
        game.load.image('tiles-1', '../assets/games/starstruck/tiles-1.png');
        game.load.image('background', '../assets/games/starstruck/background2.png');

    },
    /**
     * Add graphics, make players, start taking player input and start timer.
     */
    create: function () {
        game.stage.disableVisibilityChange = true;
        game.physics.startSystem(Phaser.Physics.ARCADE);

        game.stage.backgroundColor = '#000000';

        background = game.add.tileSprite(0, 0, 800, 600, 'background');
        background.fixedToCamera = true;

        map = game.add.tilemap('map');
        map.addTilesetImage('tiles-1');
        map.setCollisionByExclusion([13, 14, 15, 16, 46, 47, 48, 49, 50, 51]);
        layer = map.createLayer('Tile Layer 1');
        layer.resizeWorld();


        player = game.add.sprite(32, game.world.height - 150, 'dude');
        game.physics.arcade.enable(player);
        player.body.bounce.y = 0.1;
        player.body.gravity.y = 260;
        player.body.collideWorldBounds = true;
        player.animations.add('left', [0, 1, 2, 3], 10, true);
        player.animations.add('right', [5, 6, 7, 8], 10, true);


        playerSelf = game.add.sprite(32, game.world.height - 150, 'dude');
        game.physics.arcade.enable(playerSelf);
        playerSelf.body.bounce.y = 0.1;
        playerSelf.body.gravity.y = 260;
        playerSelf.body.collideWorldBounds = true;
        playerSelf.animations.add('left', [0, 1, 2, 3], 10, true);
        playerSelf.animations.add('right', [5, 6, 7, 8], 10, true);

        players[enemyID] = player;
        players[playerId] = playerSelf;

        cursors = game.input.keyboard.createCursorKeys();
        game.camera.follow(playerSelf);


        timer = game.time.create();
        timerEvent = timer.add(Phaser.Timer.MINUTE * 1 + Phaser.Timer.SECOND * 5, this.endTimer, this);
        timer.start();
    },

    /**
     * Check platform collision, send input to server(even if there is none)
     */
    update: function () {
        enemyHitPlatform = game.physics.arcade.collide(player, layer);
        playerHitPlatform = game.physics.arcade.collide(playerSelf, layer);

        let jump = "false";
        let action = "none";

        if (cursors.up.isDown && ((player.body.onFloor() && enemyHitPlatform ) || (playerSelf.body.onFloor() && playerHitPlatform))) {
            jump = "true";
        }

        if (cursors.left.isDown) {
            action = "left";
        }
        else if (cursors.right.isDown) {
            action = "right";
        }

        updateMovementInput(playerName, playerId, action, jump);

    },
    render: function () {
        if (timer.running) {
            game.debug.text(this.formatTime(Math.round((timerEvent.delay - timer.ms) / 1000)), 2, 24, "#f72222");

        }
        else {
            game.debug.text("Game over!", 2, 14, "#f72222");
        }
    },
    endTimer: function () {
        timer.stop();
        game.state.start('gameOver', true, false, game.world._height - playerSelf.y, game.world._height - player.y);
    },
    formatTime: function (s) {
        let minutes = "0" + Math.floor(s / 60);
        let seconds = "0" + (s - minutes * 60);
        return minutes.substr(-2) + ":" + seconds.substr(-2);
    }
}

let gameBootstrapper = {
    init: function (gameContainerElementId) {
        game.state.add('mpGame', mpGame);
        game.state.add('mpWaitGame', waitView);
        game.state.add('mpLogin', login);
        game.state.add('gameOver', gameOver)
        game.state.start('mpLogin');
    }
};

gameBootstrapper.init("gameDiv");