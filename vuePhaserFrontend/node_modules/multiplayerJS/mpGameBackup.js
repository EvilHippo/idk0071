canvas_width = window.innerWidth * window.devicePixelRatio;
canvas_height = window.innerHeight * window.devicePixelRatio;

game = new Phaser.Game(800,600, Phaser.AUTO, 'gameDiv');

// list of connected enemies
let players = {};
let enemyID;
let enemyName;
let map;
let playerName;
let playerId;
let gameStarted = false;

let platforms;
let hitPlatform;
let hitPlatform2;

let gameProperties = {
	gameWidth: 800,
	gameHeight: 600,
	game_elemnt: "gameDiv"
};


let mpGame = function(game){
};

function startGame()
{
    console.log('clicked');
    
    startbutton.visible = false;
    player.body.enable = true;
    game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);
}

function updateCounter() {
    /*
    if (timeLeft > 0)
        {
                timeLeft--;
            score += 100;
    timeLeftText.setText('Time left: ' + timeLeft);
            scoreText.setText('Score: ' + score);
        }
    if (timeLeft == 0)
        {
            timeLeftText.setText('GAME OVER!');
            player.body.enable = false;
            startbutton.visible = true;
        }
        */
}

function fire()
{
    let bulletSpeed = 500;
    let bulletSpacing = 400;
    let bullet = bullets.getFirstExists(false);
    if(game.time.now > nextFire)
    {
             if (bullet)
        {
             let bulletOffset = Math.sin(game.math.degToRad(player.angle));
            bullet.reset(player.x -7, player.y + 40);
            bullet.angle = player.angle;
           if (playerLeft == false)
           {
               game.physics.arcade.velocityFromAngle(bullet.angle, bulletSpeed, bullet.body.velocity);}
            if (playerLeft == true)
                {
                    game.physics.arcade.velocityFromAngle(bullet.angle - 180, bulletSpeed, bullet.body.velocity);
                }
            //bullet.body.velocity.x += player.body.velocity.x;

           nextFire = game.time.now + bulletSpacing;
        }
    }
}


function createPlayer() {
    console.log("player created");
    let player = game.add.sprite(32, game.world.height - 150, 'dude');

    game.physics.arcade.enable(player);

    player.body.bounce.y = 0.2;
    player.body.gravity.y = 300;
    player.body.collideWorldBounds = true;

    player.animations.add('left', [0, 1, 2, 3], 10, true);
    player.animations.add('right', [5, 6, 7, 8], 10, true);
    return player;
}


function movePlayers(serverJson) {
    /*
    if(!serverJson.id == playerId && !serverJson.id == enemyID) {
       return;
    }
    */

    game.physics.arcade.overlap(players[serverJson.id], null, this);


    players[serverJson.id].body.velocity.x = 0;
    if (serverJson.move == "left")
    {
        players[serverJson.id].body.velocity.x = -150;
        players[serverJson.id].animations.play('left');
    }
    else if (serverJson.move == "right")
    {
        players[serverJson.id].body.velocity.x = 150;
        console.log("moving right");
        players[serverJson.id].animations.play('right');
    }
    else
    {
        players[serverJson.id].animations.stop();
        players[serverJson.id].frame = 4;
    }
  
    if (serverJson.jump === "true" && players[serverJson.id].body.touching.down)
    {
        players[serverJson.id].body.velocity.y = -300;
    }
    
}

/*
function mpSetup(username) {
    console.log("userName: " + username);
    connect();
}
*/

mpGame.prototype = {	
    init: function(newEnemyName, newEnemyId, newMap) {
        console.log("Initialize game with enemy name, enemy id, map: " + newEnemyName + " " + newEnemyId + " "+ newMap);
		enemyID = newEnemyId;
        enemyName = newEnemyName;
        map = newMap;
	},
    
	preload: function() {
        
        game.load.image('ground1', 'Layer_0000_9.png');
        game.load.image('ground2', 'Layer_0001_8.png');
        game.load.image('bg1', 'Layer_0002_7.png');
        game.load.image('bg2', 'Layer_0003_6.png');
        game.load.image('bg3', 'Layer_0004_Lights.png');
        game.load.image('bg4', 'Layer_0005_5.png');
        game.load.image('bg5', 'Layer_0006_4.png');
        game.load.image('bg6', 'Layer_0007_Lights.png');
        game.load.image('bg7', 'Layer_0008_3.png');
        game.load.image('bg8', 'Layer_0009_2.png');
        game.load.image('bg9', 'Layer_0010_1.png');

        game.load.spritesheet('button', 'startbtn.png', 200, 100);

        game.load.image('sky', 'assets/sky.png');
        game.load.image('ground', 'assets/platform.png');
        game.load.image('star', 'assets/star.png');
        game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
        game.load.image('bullet', 'purple_ball.png');

    },
	
	create: function () {
        game.stage.disableVisibilityChange = true;
        
        game.physics.startSystem(Phaser.Physics.ARCADE);

        game.add.sprite(0, 0, 'sky');

        platforms = game.add.group();
        platforms.enableBody = true;
        let ground = platforms.create(0, game.world.height - 64, 'ground');
        ground.scale.setTo(2, 2);
        ground.body.immovable = true;
        let ledge = platforms.create(400, 400, 'ground');
        ledge.body.immovable = true;
        ledge = platforms.create(-150, 250, 'ground');
        ledge.body.immovable = true;
        
        player = game.add.sprite(32, game.world.height - 150, 'dude');
        game.physics.arcade.enable(player);
        player.body.bounce.y = 0.2;
        player.body.gravity.y = 300;
        player.body.collideWorldBounds = true;
        player.animations.add('left', [0, 1, 2, 3], 10, true);
        player.animations.add('right', [5, 6, 7, 8], 10, true);
        
        playerSelf = game.add.sprite(32, game.world.height - 150, 'dude');
        game.physics.arcade.enable(playerSelf);
        playerSelf.body.bounce.y = 0.2;
        playerSelf.body.gravity.y = 300;
        playerSelf.body.collideWorldBounds = true;
        playerSelf.animations.add('left', [0, 1, 2, 3], 10, true);
        playerSelf.animations.add('right', [5, 6, 7, 8], 10, true);
        
        players[enemyID] = player;
        players[playerId] = playerSelf;
        
        scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });
        cursors = game.input.keyboard.createCursorKeys();
        
        //  stars not needed, only for quick physics testing
        /*
        stars = game.add.group();
        stars.enableBody = true;
        for (let i = 0; i < 15; i++)
        {
            let star = stars.create(i * 40, 0, 'star');
            star.body.gravity.y = 200;
            star.body.bounce.y = 0.7 + Math.random() * 0.2;
        }
        */
	},
	
	update: function () {
        hitPlatform = game.physics.arcade.collide(player, platforms);
        hitPlatform2 = game.physics.arcade.collide(playerSelf, platforms);
        
        let jump = "false";
        let action = "none";
        
        if (cursors.up.isDown && ((player.body.touching.down && hitPlatform )|| (playerSelf.body.touching.down && hitPlatform2)))
        {
            jump = "true";
        }
        
		if (cursors.left.isDown)
        {
            action = "left";
        }
        else if (cursors.right.isDown)
        {
            action = "right";
        }
        
        updatePlayerInput(playerName, playerId, action, jump);
	}
}

let gameBootstrapper = {
    init: function(gameContainerElementId){
		game.state.add('mpGame', mpGame);
        game.state.add('mpWaitGame', waitView);
		game.state.add('mpLogin', login);
		game.state.start('mpLogin'); 
    }
};

gameBootstrapper.init("gameDiv");