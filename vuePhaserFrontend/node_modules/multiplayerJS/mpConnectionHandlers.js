/**
 * Socket connection handling between server and client.
 */


let stompClient = null;

function serverOutPutHandler(serverJson) {
    console.log("option:" + serverJson.option);
    if (serverJson.option === "gameStartByRequest") {
        if (!gameStarted) {
            gameStarted = true;
        }
    } else if (serverJson.option === "gameRequest") {
        if (!gameStarted && serverJson.id !== playerId) {
            playerRequestStartGame(playerName, playerId);
        }

    } else if (serverJson.option === "movementUpdate") {
        if (gameStarted) {
            movePlayers(serverJson);
        }
    } else if (serverJson.option === "signal") {
        if (!startSignal) {
            signal(serverJson);
        }
    } else if (serverJson.option === "notifyEnd") {
        endGame(serverJson);
    }
}

function connect() {
    console.log("connecting socket");
    let socket = new SockJS('http://localhost:8080/socket');

    stompClient = Stomp.over(socket);
    stompClient.connect({}, function (frame) {
        stompClient.subscribe('/game/play', function (socketMsg) {
            serverOutPutHandler(JSON.parse(socketMsg.body));
        });
    });
}


function disconnect() {
    if (stompClient !== null) {
        stompClient.disconnect();
    }
    console.log("Disconnected");
}


function playerRequestGame(name, id) {
    let playerOutput = JSON.stringify({'name': name, 'id': id});
    stompClient.send("/app/requestGame", {}, playerOutput);
}

function playerRequestStartGame(name, id) {
    let playerOutput = JSON.stringify({'name': name, 'id': id});
    stompClient.send("/app/requestStartGame", {}, playerOutput);
}

function playerStartSignal(name, id) {
    let playerOutput = JSON.stringify({'name': name, 'id': id});
    stompClient.send("/app/gameStartSignal", {}, playerOutput);
}

function notifyEnd(playerId, enemyID, ownScore, enemyScore) {
    let playerOutput = JSON.stringify({'player1': playerId, 'player2': enemyID, 'p1score': ownScore, 'p2score': enemyScore});
    stompClient.send("/app/notifyEnd", {}, playerOutput);
}

function updatePlayerInput(name, id, move, jump, cordinatesPlayer, cordinatesEnemy) {
    let playerOutput = JSON.stringify(
        {
            'name': name,
            'id': id,
            'move': move,
            'jump': jump,
            'playerCordsX': cordinatesPlayer[0],
            'playerCordsY': cordinatesPlayer[1],
            'enemyCordsX': cordinatesEnemy[0],
            'enemyCordsY': cordinatesEnemy[1]
        });
    stompClient.send("/app/movementUpdate", {}, playerOutput);
}


/*
// uncomment for socket testing
$(function () {
    $("form").on('submit', function (e) {
        e.preventDefault();
    });
    $( "#connect" ).click(function() { connect(); });
    $( "#disconnect" ).click(function() { disconnect(); });
    $( "#send" ).click(function() { sendName(); });
});

function setConnected(connected) {
    $("#connect").prop("disabled", connected);
    $("#disconnect").prop("disabled", !connected);
    if (connected) {
        $("#conversation").show();
    }
    else {
        $("#conversation").hide();
    }
    $("#greetings").html("");
}

*/








