/**
 * Login gamestate.
 */


entername.onclick = function () {
    signDiv.style.display = 'none';
    waitGame();
};

/*
function checkOutput(data, gameChecker) {
    console.log("checkOutput data: " + data);
}
*/

function joinGame(newEnemyName, newEnemyId, newMap) {
    console.log("in joinGame: " + newEnemyName + " " + newEnemyId + " " + newMap);
    game.state.start(
        'mpGame', true, false, newEnemyName, newEnemyId, newMap
    );
}

// generate ID for each player
function generateID() {
    return Math.floor(Math.random() * 10000000000);
}


function waitGame() {
    game.state.start('mpWaitGame');

    //connect to the server socket
    connect();

    playerName = signdivusername.value;
    playerId = generateID();

    // let the server know theres a new player
    $.ajax({
        type: "POST",
        url: "http://localhost:8080/user/create",
        data: "{'UID':" + playerId + ",'username':" + playerName + "}",
        contentType: "application/json; charset=utf-8",
        dataType: "json"
    });

    // check for game until another player joins
    let gameChecker = setInterval(function () {
        $.ajax({
            type: "POST",
            url: "http://localhost:8080/user/play",
            data: "{'UID':" + playerId + ",'username':" + playerName + "}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                //console.log("data is: " + data.username);
                console.log("data is123: " + data[0].username);
                if (data[0].username !== null && data[0].username !== undefined) {
                    clearInterval(gameChecker);

                    console.log("read me here: " + data[1].username + " " + data[1].uid + " " + data[1].map);
                    joinGame(data[1].username, data[1].uid, data[1].map);
                }
            }
        });

    }, 2000);

    setTimeout(function () {
        if (!gameStarted) {
            playerRequestGame(playerName, playerId);
            let ownInfo = JSON.stringify({'name': playerName, 'id': playerId});
            stompClient.send("/app/game", {}, ownInfo);
        }

    }, 1000);

}


let login = function (game) {
};

login.prototype = {
preload: function()
    {
        game.load.image('bg1', '../farshockAssets/Layer_0002_7.png');
        game.load.image('bg2', '../farshockAssets/Layer_0003_6.png');
        game.load.image('bg3', '../farshockAssets/Layer_0004_Lights.png');
        game.load.image('bg4', '../farshockAssets/Layer_0005_5.png');
        game.load.image('bg5', '../farshockAssets/Layer_0006_4.png');
        game.load.image('bg6', '../farshockAssets/Layer_0007_Lights.png');
        game.load.image('bg7', '../farshockAssets/Layer_0008_3.png');
        game.load.image('bg8', '../farshockAssets/Layer_0009_2.png');
        game.load.image('bg9', '../farshockAssets/Layer_0010_1.png'); 
    },
    create: function () {
        game.add.tileSprite(0, 0, 800, 600, 'bg9');
        game.add.tileSprite(0, 0, 800, 600, 'bg8');
        game.add.tileSprite(0, 0, 800, 600, 'bg7');
        game.add.tileSprite(0, 0, 800, 600, 'bg6');
        game.add.tileSprite(0, 0, 800, 600, 'bg5');
        game.add.tileSprite(0, 0, 800, 600, 'bg4');
		game.add.tileSprite(0, 0, 800, 600, 'bg3');
        game.add.tileSprite(0, 0, 800, 600, 'bg2');
        game.add.tileSprite(0, 0, 800, 600, 'bg1');
     
        //socket = io({transports: ['websocket'], upgrade: false});
        //socket.on('join_game', join_game);
    }
};