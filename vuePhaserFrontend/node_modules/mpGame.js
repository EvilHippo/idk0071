canvas_width = window.innerWidth * window.devicePixelRatio;
canvas_height = window.innerHeight * window.devicePixelRatio;

game = new Phaser.Game(800,600, Phaser.AUTO, 'gameDiv');

// list of connected enemies
var players = {};
var enemyIDs = [];
var playerName;
var playerId;
var gameStarted = false;

var gameProperties = { 
	gameWidth: 4000,
	gameHeight: 4000,
	game_elemnt: "gameDiv",
	in_game: false,
};


var mpGame = function(game){
};

function startGame()
{
    console.log('clicked');
    
    startbutton.visible = false;
    player.body.enable = true;
    game.time.events.loop(Phaser.Timer.SECOND, updateCounter, this);
}

function updateCounter() {
    /*
    if (timeLeft > 0)
        {
                timeLeft--;
            score += 100;
    timeLeftText.setText('Time left: ' + timeLeft);
            scoreText.setText('Score: ' + score);
        }
    if (timeLeft == 0)
        {
            timeLeftText.setText('GAME OVER!');
            player.body.enable = false;
            startbutton.visible = true;
        }
        */
}

function fire()
{
    var bulletSpeed = 500;
    var bulletSpacing = 400;
    var bullet = bullets.getFirstExists(false);
    if(game.time.now > nextFire)
    {
             if (bullet)
        {
             var bulletOffset = Math.sin(game.math.degToRad(player.angle));
            bullet.reset(player.x -7, player.y + 40);
            bullet.angle = player.angle;
           if (playerLeft == false)
           {
               game.physics.arcade.velocityFromAngle(bullet.angle, bulletSpeed, bullet.body.velocity);}
            if (playerLeft == true)
                {
                    game.physics.arcade.velocityFromAngle(bullet.angle - 180, bulletSpeed, bullet.body.velocity);
                }
            //bullet.body.velocity.x += player.body.velocity.x;

           nextFire = game.time.now + bulletSpacing;
        }
    }
}

function checkForPlayer(id) {
    if(id in players) {
        return true;
    }
    return false;
}

function createPlayer() {
    var player = game.add.sprite(32, game.world.height - 150, 'dude');

    game.physics.arcade.enable(player);

    player.body.bounce.y = 0.2;
    player.body.gravity.y = 300;
    player.body.collideWorldBounds = true;

    player.animations.add('left', [0, 1, 2, 3], 10, true);
    player.animations.add('right', [5, 6, 7, 8], 10, true);
    return player;
}


function movePlayers(serverJson) {
    console.log("******** ID: " + serverJson.id);
    for(var key in players){
      console.log(players[key]);
      /* use key/value for intended purpose */
    }
    if(!checkForPlayer(serverJson.id)) {
        console.log("creating new player");
        players["id"] = createPlayer();
    }
    
    
    var hitPlatform = game.physics.arcade.collide(players["id"], platforms);
    // game.physics.arcade.collide(stars, platforms);

    game.physics.arcade.overlap(players["id"], null, this);

    //  Reset the players velocity (movement)
    players["id"].body.velocity.x = 0;

    if (serverJson.move = "left")
    {
        //  Move to the left
        players["id"].body.velocity.x = -150;

        players["id"].animations.play('left');
    }
    else if (serverJson.move = "right")
    {
        //  Move to the right
        players["id"].body.velocity.x = 150;

        players["id"].animations.play('right');
    }
    else
    {
        //  Stand still
        players["id"].animations.stop();

        players["id"].frame = 4;
    }

    //  Allow the player to jump if they are touching the ground.
    if (serverJson.jump == "true" && players["id"].body.touching.down && hitPlatform)
    {
        players["id"].body.velocity.y = -350;
    }
}

/*
function mpSetup(username) {
    console.log("userName: " + username);
    connect();
}
*/

mpGame.prototype = {	
	preload: function() {
        
    game.load.image('ground1', 'Layer_0000_9.png');
    game.load.image('ground2', 'Layer_0001_8.png');
    game.load.image('bg1', 'Layer_0002_7.png');
    game.load.image('bg2', 'Layer_0003_6.png');
    game.load.image('bg3', 'Layer_0004_Lights.png');
    game.load.image('bg4', 'Layer_0005_5.png');
    game.load.image('bg5', 'Layer_0006_4.png');
    game.load.image('bg6', 'Layer_0007_Lights.png');
    game.load.image('bg7', 'Layer_0008_3.png');
    game.load.image('bg8', 'Layer_0009_2.png');
    game.load.image('bg9', 'Layer_0010_1.png');
    
    game.load.spritesheet('button', 'startbtn.png', 200, 100);


    game.load.image('sky', 'assets/sky.png');
    game.load.image('ground', 'assets/platform.png');
    game.load.image('star', 'assets/star.png');
    game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
    game.load.image('bullet', 'purple_ball.png');

    },
	
	create: function () {
        
            //  We're going to be using physics, so enable the Arcade Physics system
        game.physics.startSystem(Phaser.Physics.ARCADE);

        //  A simple background for our game
        game.add.sprite(0, 0, 'sky');

        //  The platforms group contains the ground and the 2 ledges we can jump on
        platforms = game.add.group();

        //  We will enable physics for any object that is created in this group
        platforms.enableBody = true;

        // Here we create the ground.
        var ground = platforms.create(0, game.world.height - 64, 'ground');

        //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
        ground.scale.setTo(2, 2);

        //  This stops it from falling away when you jump on it
        ground.body.immovable = true;

        //  Now let's create two ledges
        var ledge = platforms.create(400, 400, 'ground');
        ledge.body.immovable = true;

        ledge = platforms.create(-150, 250, 'ground');
        ledge.body.immovable = true;
        
        /*
        // The player and its settings
        player = game.add.sprite(32, game.world.height - 150, 'dude');

        //  We need to enable physics on the player
        game.physics.arcade.enable(player);

        //  Player physics properties. Give the little guy a slight bounce.
        player.body.bounce.y = 0.2;
        player.body.gravity.y = 300;
        player.body.collideWorldBounds = true;

        //  Our two animations, walking left and right.
        player.animations.add('left', [0, 1, 2, 3], 10, true);
        player.animations.add('right', [5, 6, 7, 8], 10, true);
        */

        //  Finally some stars to collect
        stars = game.add.group();

        //  We will enable physics for any star that is created in this group
        stars.enableBody = true;

        //  Here we'll create 12 of them evenly spaced apart
        for (var i = 0; i < 12; i++)
        {
            //  Create a star inside of the 'stars' group
            var star = stars.create(i * 70, 0, 'star');

            //  Let gravity do its thing
            star.body.gravity.y = 300;

            //  This just gives each star a slightly random bounce value
            star.body.bounce.y = 0.7 + Math.random() * 0.2;
        }

        //  The score
        scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

        //  Our controls.
        cursors = game.input.keyboard.createCursorKeys();
	},
	
	update: function () {
        var jump = "false";
        var action = "none";
        
        if (cursors.up.isDown)
        {
            jump = "true";
        }
        
		if (cursors.left.isDown)
        {
            action = "left";
        }
        else if (cursors.right.isDown)
        {
            action = "right";
        }
        
        updateMovementInput(playerName, playerId, action, jump);        
	}
}

var gameBootstrapper = {
    init: function(gameContainerElementId){
		game.state.add('mpGame', mpGame);
		game.state.add('mpLogin', login);
		game.state.start('mpLogin'); 
    }
};;

gameBootstrapper.init("gameDiv");